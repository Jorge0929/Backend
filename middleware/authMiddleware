const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Middleware para verificar el token JWT y proteger rutas
const protect = async (req, res, next) => {
    let token;

    // 1. Verificar si el encabezado Authorization existe y tiene el formato Bearer TOKEN
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            //Extraer el token del encabezado
            token = req.headers.authorization.split(' ')[1];

            //Verificar el token usando el secreto JWT
            const decoded = jwt.verify(token, process.env.JWT_SECRET);

            // 4. Añadir la información del usuario (del payload del token) al objeto 'req'-
            req.user = {
                userId: decoded.userId, 
                nombre: decoded.nombre 
            };


            next(); // Si el token es válido, continuar con la siguiente función

        } catch (error) {
            console.error('Error de autenticación de token:', error.message);
            if (error.name === 'JsonWebTokenError') {
                return res.status(401).json({ message: 'Token inválido.' });
            }
            if (error.name === 'TokenExpiredError') {
                return res.status(401).json({ message: 'Token expirado.' });
            }
            res.status(401).json({ message: 'No autorizado, fallo en la verificación del token.' });
        }
    }

    //Si no hay token o el formato no es Bearer
    if (!token) {
        res.status(401).json({ message: 'No autorizado, no se proporcionó token.' });
    }
};

module.exports = { protect };